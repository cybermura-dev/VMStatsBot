from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from ..config.config_manager import ConfigManager
from ..keyboards.keyboards import KeyboardManager
from ..services.vm_service import VMService

router = Router()
config = ConfigManager().config
keyboards = KeyboardManager()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    if message.from_user.id not in config.bot.admin_ids:
        return
    await message.answer("üñ•Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π", reply_markup=keyboards.main_menu())

@router.callback_query(F.data == "main_menu")
async def return_to_main(call: CallbackQuery):
    """Return to main menu"""
    await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.main_menu())

@router.callback_query(F.data == "vm_control")
async def show_vm_control(call: CallbackQuery):
    """Show VM control menu"""
    await call.message.edit_text("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–ú:", reply_markup=keyboards.vm_control_menu())

@router.callback_query(F.data == "current_status")
async def show_status(call: CallbackQuery):
    """Show current system status"""
    vm_service = VMService()
    stats = await vm_service.get_system_stats()
    
    status_text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"<b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞:</b>\n"
        f"‚Ä¢ –ò–º—è: {config.vm.name}\n"
        f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {stats['state']}\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']}\n\n"
        f"<b>–•–æ—Å—Ç-—Å–µ—Ä–≤–µ—Ä:</b>\n"
        f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {stats['cpu_usage']}\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage']}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {stats['current_time']}"
    )
    
    await call.message.edit_text(
        status_text,
        reply_markup=keyboards.back_button(),
        parse_mode="HTML"
    ) 